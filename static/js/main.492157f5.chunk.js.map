{"version":3,"sources":["Home.js","Scan.js","Sync.js","Config.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","React","Component","Scan","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","result","handleError","bind","assertThisInitialized","handleScan","data","window","localStorage","setItem","moment","format","alert","err","console","error","lib_default","delay","onError","onScan","style","width","Sync","loading","onSave","_this2","setState","keys","filter","k","map","key","uuid","time","getItem","axios","post","scans","headers","Authorization","then","type","onClick","value","company","handleChange","handleSubmit","event","target","preventDefault","onSubmit","onChange","AppRouter","react_router_dom","to","react_router","path","exact","component","Config","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.492157f5.chunk.js","sourcesContent":["import React from 'react'\n\nclass Home extends React.Component {\n  render () {\n    return <div>\n      <h1>Bem vindo! Escolha uma das opções.</h1>\n    </div>\n  }\n}\n\nexport default Home\n","import React from 'react'\nimport QrReader from 'react-qr-reader'\nimport moment from 'moment'\n\nclass Scan extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      result: 'No result'\n    }\n\n    this.handleError = this.handleError.bind(this)\n    this.handleScan = this.handleScan.bind(this)\n  }\n\n  handleScan (data) {\n    if (data) {\n      window.localStorage.setItem(data, moment().format())\n      window.alert('Salvo com sucesso')\n    }\n  }\n\n  handleError (err) {\n    console.error(err)\n  }\n\n  render () {\n    return (\n      <div>\n        <QrReader\n          delay={300}\n          onError={this.handleError}\n          onScan={this.handleScan}\n          style={{ width: '100%' }}\n        />\n        <p>{this.state.result}</p>\n      </div>\n    )\n  }\n}\n\nexport default Scan\n","import React from 'react'\nimport axios from 'axios'\n\nclass Sync extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      loading: false\n    }\n\n    this.onSave = this.onSave.bind(this)\n  }\n\n  onSave () {\n    this.setState({\n      loading: true\n    })\n    const keys = Object.keys(window.localStorage)\n    const data = keys.filter(k => k !== 'company').map(key => {\n      return {\n        uuid: key,\n        time: window.localStorage.getItem(key)\n      }\n    })\n\n    axios.post(\n      'https://conf-scan.herokuapp.com/scans',\n      { scans: data },\n      { headers: { Authorization: window.localStorage.getItem('company') } }\n    ).then(() => {\n      this.setState({\n        loading: false\n      })\n    })\n  }\n\n  render () {\n    if (this.state.loading) {\n      return <div>Salvando...</div>\n    }\n\n    return <div>\n      <input type='button' onClick={this.onSave} value='Sincronizar' />\n    </div>\n  }\n}\n\nexport default Sync\n","import React from 'react'\n\nclass Home extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      company: null\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange (event) {\n    this.setState({\n      value: event.target.value\n    })\n  }\n\n  handleSubmit (event) {\n    event.preventDefault()\n    window.localStorage.setItem('company', this.state.company)\n    window.alert('Configuração salva com sucesso!')\n  }\n\n  render () {\n    return <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Código:\n          <input type='text' value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type='submit' value='Salvar' />\n      </form>\n    </div>\n  }\n}\n\nexport default Home\n","\nimport React from 'react'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Home from './Home'\nimport Scan from './Scan'\nimport Sync from './Sync'\nimport Config from './Config'\n\nfunction AppRouter () {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to='/'>Home</Link>\n            </li>\n            <li>\n              <Link to='/scan/'>Scan</Link>\n            </li>\n            <li>\n              <Link to='/sync/'>Sincronizar</Link>\n            </li>\n            <li>\n              <Link to='/config/'>Configurar</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Route path='/' exact component={Home} />\n        <Route path='/scan/' component={Scan} />\n        <Route path='/sync/' component={Sync} />\n        <Route path='/config/' component={Config} />\n      </div>\n    </Router>\n  )\n}\n\nexport default AppRouter\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}